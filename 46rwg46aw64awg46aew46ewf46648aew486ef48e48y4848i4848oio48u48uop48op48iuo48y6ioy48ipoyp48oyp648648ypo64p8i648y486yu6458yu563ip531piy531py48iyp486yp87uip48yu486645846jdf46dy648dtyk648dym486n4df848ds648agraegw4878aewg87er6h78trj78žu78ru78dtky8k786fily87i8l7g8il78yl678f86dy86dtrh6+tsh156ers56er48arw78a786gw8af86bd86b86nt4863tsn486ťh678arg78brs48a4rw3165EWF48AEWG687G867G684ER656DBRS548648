	_G.Velocity = Vector3.new(30,0,0)



	for i,v in next, game:GetService("Players").LocalPlayer.Character:GetDescendants() do
		if v:IsA("BasePart") and v.Name ~="HumanoidRootPart" then
			game:GetService("RunService").Heartbeat:connect(function()
				v.Velocity = Vector3.new(30,0,0)
				wait(0.5)
			end)
		end
	end

	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Electroware Notification";
		Text = "Elecroware Netless executed please wait untill your health is 0";
		Icon = "http://www.roblox.com/asset/?id=8724185099"})

	local netboost = 100 --velocity 

	local simradius = "shp" --simulation radius method

	local antiragdoll = true --removes hingeConstraints and ballSocketConstraints from your character
	local newanimate = true --disables the animate script and enable after reanimation
	local discharscripts = true --disables all localScripts parented to your character before reanimation
	local R15toR6 = false --tries to convert your character to r6 if its r15
	local addtools = false --puts all tools from backpack to character and lets you hold them after reanimation
	local loadtime = game:GetService("Players").RespawnTime + 0.5 --anti respawn delay
	local method = 3 --reanimation method

	local alignmode = 2 --AlignPosition mode

	local hedafterneck = true --disable aligns for head and enable after neck is removed

	local lp = game:GetService("Players").LocalPlayer
	local rs = game:GetService("RunService")
	local stepped = rs.Stepped
	local heartbeat = rs.Heartbeat
	local renderstepped = rs.RenderStepped
	local sg = game:GetService("StarterGui")
	local ws = game:GetService("Workspace")

	local c = lp.Character

	local function gp(parent, name, className)
		local ret = nil
		if parent then
			for i, v in pairs(parent:GetChildren()) do
				if (v.Name == name) and v:IsA(className) then
					ret = v
				end
			end
		end
		return ret
	end

	local function align(Part0, Part1)
		Part0.CustomPhysicalProperties = PhysicalProperties.new(0.0001, 0.0001, 0.0001, 0.0001, 0.0001)

		local att1 = Instance.new("Attachment")
		att1.Orientation = Vector3.new(0, 0, 0)
		att1.Position = Vector3.new(0, 0, 0)
		att1.Archivable = true
		local att0 = att1:Clone()

		if (alignmode == 1) or (alignmode == 2) then
			local ape = Instance.new("AlignPosition", att0)
			ape.ApplyAtCenterOfMass = false
			ape.MaxForce = math.huge
			ape.MaxVelocity = math.huge
			ape.ReactionForceEnabled = false
			ape.Responsiveness = 200
			ape.Attachment1 = att1
			ape.Attachment0 = att0
			ape.Name = "AlignPositionRtrue"
			ape.RigidityEnabled = true
		end

		if (alignmode == 2) or (alignmode == 3) then
			local apd = Instance.new("AlignPosition", att0)
			apd.ApplyAtCenterOfMass = false
			apd.MaxForce = math.huge
			apd.MaxVelocity = math.huge
			apd.ReactionForceEnabled = false
			apd.Responsiveness = 200
			apd.Attachment1 = att1
			apd.Attachment0 = att0
			apd.Name = "AlignPositionRfalse"
			apd.RigidityEnabled = false
		end

		local ao = Instance.new("AlignOrientation", att0)
		ao.MaxAngularVelocity = math.huge
		ao.MaxTorque = math.huge
		ao.PrimaryAxisOnly = false
		ao.ReactionTorqueEnabled = false
		ao.Responsiveness = 200
		ao.Attachment1 = att1
		ao.Attachment0 = att0
		ao.RigidityEnabled = false

		att1.Parent = Part1
		att1.Name = "att1_" .. Part1.Name

		att0.Parent = Part0
		att0.Name = "att0_" .. Part0.Name

		if typeof(netboost) == "Vector3" then
			spawn(function()
				local vel = Vector3.new(0, 0, 0)
				while Part0 and Part0.Parent do
					Part0.Velocity = vel
					heartbeat:Wait()
					if Part0 and Part0.Parent then
						vel = Part0.Velocity
						Part0.Velocity = netboost
						stepped:Wait()
					end
				end
			end)
		end

		if typeof(netboost) == "number" then
			spawn(function()
				local vel = Vector3.new(0, 0, 0)
				while Part0 and Part0.Parent do
					Part0.Velocity = vel
					heartbeat:Wait()
					if Part0 and Part0.Parent then
						local newvel = vel
						local mag = newvel.Magnitude
						if mag < 0.1 then
							newvel = Vector3.new(0, netboost, 0)
						else
							local multiplier = netboost / mag
							newvel *= Vector3.new(multiplier,  multiplier, multiplier)
						end
						vel = Part0.Velocity
						Part0.Velocity = newvel
						stepped:Wait()
					end
				end
			end)
		end
	end

	local function respawnrequest()
		local c = lp.Character
		local ccfr = ws.CurrentCamera.CFrame
		local fc = Instance.new("Model")
		local nh = Instance.new("Humanoid", fc)
		lp.Character = fc
		nh.Health = 0
		lp.Character = c
		fc:Destroy()
		local con = nil
		local function confunc()
			con:Disconnect()
			ws.CurrentCamera.CFrame = ccfr
		end
		con = renderstepped:Connect(confunc)
	end

	local destroyhum = (method == 4) or (method == 5)
	local breakjoints = (method == 0) or (method == 4)
	local antirespawn = (method == 0) or (method == 2) or (method == 3)

	addtools = addtools and gp(lp, "Backpack", "Backpack")

	if not (c and c.Parent) then
		return
	end

	if simradius == "shp" then
		local shp = sethiddenproperty or set_hidden_property or set_hidden_prop or sethiddenprop
		if shp then
			spawn(function()
				while heartbeat:Wait() and c and c.Parent do
					shp(lp, "SimulationRadius", math.huge)
				end
			end)
		end
	end

	if simradius == "ssr" then
		local ssr = setsimulationradius or set_simulation_radius or set_sim_radius or setsimradius or set_simulation_rad or setsimulationrad
		if ssr then
			spawn(function()
				while stepped:Wait() and c and c.Parent do
					ssr(math.huge)
				end
			end)
		end
	end

	antiragdoll = antiragdoll and function(v)
		if v and v.Parent and (v:IsA("HingeConstraint") or v:IsA("BallSocketConstraint")) then
			v:Destroy()
		end
	end

	if antiragdoll then
		for i, v in pairs(c:GetDescendants()) do
			antiragdoll(v)
		end
		c.DescendantAdded:Connect(antiragdoll)
	end

	if antirespawn then
		respawnrequest()
	end

	if method == 0 then
		wait(loadtime)
		if not (c and c.Parent) then
			return
		end
	end

	game:GetService("RunService").Stepped:Connect(function()
		Humanoid.Died:Connect(function()
			return -- Breaks the script, function 'break' will not work on runservices idk why.
		end)
		for i,v in pairs(Character:GetChildren()) do
			if v:IsA("BasePart") then
				v.CanCollide = false
			end
		end
		-- fuck it
	end)

	game:GetService("RunService").Heartbeat:Connect(function()
		for i,v in pairs(Character:GetChildren()) do
			if v:IsA("BasePart") then v.Velocity = _G.Velocity elseif v:IsA("Accessory") then v.Handle.Velocity = _G.Velocity end
		end
	end)

	if discharscripts then
		for i, v in pairs(c:GetChildren()) do
			if v and v.Parent and v:IsA("LocalScript") then
				v.Disabled = true
			end
		end
	elseif newanimate then
		local animate = gp(c, "Animate", "LocalScript")
		if animate and (not animate.Disabled) then
			animate.Disabled = true
		else
			newanimate = false
		end
	end

	local hum = c:FindFirstChildOfClass("Humanoid")
	if hum then
		for i, v in pairs(hum:GetPlayingAnimationTracks()) do
			v:Stop()
		end
	end

	if addtools then
		for i, v in pairs(addtools:GetChildren()) do
			if v and v.Parent and v:IsA("Tool") then
				v.Parent = c
			end
		end
	end

	pcall(function()
		settings().Physics.AllowSleep = false
		settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
	end)

	local OLDscripts = {}

	for i, v in pairs(c:GetDescendants()) do
		if v.ClassName == "Script" then
			table.insert(OLDscripts, v)
		end
	end

	local scriptNames = {}

	for i, v in pairs(c:GetDescendants()) do
		if v and v.Parent and v:IsA("BasePart") then
			local newName = tostring(i)
			local exists = true
			while exists do
				exists = false
				for i, v in pairs(OLDscripts) do
					if v.Name == newName then
						exists = true
					end
				end
				if exists then
					newName = newName .. "_"    
				end
			end
			table.insert(scriptNames, newName)
			Instance.new("Script", v).Name = newName
		end
	end

	c.Archivable = true
	local cl = c:Clone()
	for i, v in pairs(cl:GetDescendants()) do
		pcall(function()
			v.Transparency = 1
			v.Anchored = false
		end)
	end

	local model = Instance.new("Model", c)
	model.Name = model.ClassName

	for i, v in pairs(c:GetChildren()) do
		if v and v.Parent and (v ~= model) then
			if destroyhum and v:IsA("Humanoid") then
				v:Destroy()
			else
				if addtools and v:IsA("Tool") then
					for i1, v1 in pairs(v:GetDescendants()) do
						if v1 and v1.Parent and v1:IsA("BasePart") then
							local bv = Instance.new("BodyVelocity", v1)
							bv.Velocity = Vector3.new(0, 0, 0)
							bv.MaxForce = Vector3.new(1000, 1000, 1000)
							bv.P = 1250
							bv.Name = "bv_" .. v.Name
						end
					end
				end
				v.Parent = model
			end
		end
	end
	local head = gp(model, "Head", "BasePart")
	local torso = gp(model, "Torso", "BasePart") or gp(model, "UpperTorso", "BasePart")
	if breakjoints then
		model:BreakJoints()
	else
		if head and torso then
			for i, v in pairs(model:GetDescendants()) do
				if v and v.Parent and v:IsA("Weld") or v:IsA("Snap") or v:IsA("Glue") or v:IsA("Motor") or v:IsA("Motor6D") then
					local save = false
					if (v.Part0 == torso) and (v.Part1 == head) then
						save = true
					end
					if (v.Part0 == head) and (v.Part1 == torso) then
						save = true
					end
					if save then
						if hedafterneck then
							hedafterneck = v
						end
					else
						v:Destroy()
					end
				end
			end
		end
		if method == 3 then
			spawn(function()
				wait(loadtime)
				if model and model.Parent then
					model:BreakJoints()
				end
			end)
		end
	end

	cl.Parent = c
	for i, v in pairs(cl:GetChildren()) do
		if v and v.Parent then
			v.Parent = c
		end
	end
	cl:Destroy()

	local modelcolcon = nil
	local function modelcolf()
		if model and model.Parent then
			for i, v in pairs(model:GetDescendants()) do
				if v:IsA("BasePart") then
					v.CanCollide = false
				end
			end
		else
			modelcolcon:Disconnect()
		end
	end
	modelcolcon = stepped:Connect(modelcolf)
	modelcolf()

	for i, scr in pairs(model:GetDescendants()) do
		if scr and scr.Parent and (scr.ClassName == "Script") and table.find(scriptNames, scr.Name) then
			local Part0 = scr.Parent
			if Part0:IsA("BasePart") then
				for i1, scr1 in pairs(c:GetDescendants()) do
					if scr1 and scr1.Parent and (scr1.ClassName == "Script") and (scr1.Name == scr.Name) and (not scr1:IsDescendantOf(model)) then
						local Part1 = scr1.Parent
						if (Part1.ClassName == Part0.ClassName) and (Part1.Name == Part0.Name) then
							align(Part0, Part1)
						end
					end
				end
			end
		end
	end

	if (typeof(hedafterneck) == "Instance") and head and head.Parent then
		local aligns = {}
		for i, v in pairs(head:GetDescendants()) do
			if v and v.Parent and (v:IsA("AlignPosition") or v:IsA("AlignOrientation")) then
				table.insert(aligns, v)
				v.Enabled = false
			end
		end
		spawn(function()
			while c and c.Parent and hedafterneck and hedafterneck.Parent do
				stepped:Wait()
			end
			if not (c and c.Parent and head and head.Parent) then
				return
			end
			for i, v in pairs(aligns) do
				pcall(function()
					v.Enabled = true
				end)
			end
		end)
	end

	for i, v in pairs(c:GetDescendants()) do
		if v and v.Parent then
			if v.ClassName == "Script" then
				if table.find(scriptNames, v.Name) then
					v:Destroy()
				end
			else
				if not v:IsDescendantOf(model) then
					if v:IsA("Decal") then
						v.Transparency = 1
					end
					if v:IsA("ForceField") then
						v.Visible = false
					end
					if v:IsA("Sound") then
						v.Playing = false
					end
					if v:IsA("BillboardGui") or v:IsA("SurfaceGui") or v:IsA("ParticleEmitter") or v:IsA("Fire") or v:IsA("Smoke") or v:IsA("Sparkles") then
						v.Enabled = false
					end
				end
			end
		end
	end

	if newanimate then
		local animate = gp(c, "Animate", "LocalScript")
		if animate then
			animate.Disabled = false
		end
	end

	if addtools then
		for i, v in pairs(c:GetChildren()) do
			if v and v.Parent and v:IsA("Tool") then
				v.Parent = addtools
			end
		end
	end

	local hum0 = model:FindFirstChildOfClass("Humanoid")
	local hum1 = c:FindFirstChildOfClass("Humanoid")
	if hum1 then
		ws.CurrentCamera.CameraSubject = hum1
		spawn(function()
			renderstepped:Wait()
			if c and c.Parent and hum1 and (hum1.Parent == c) then
				ws.CurrentCamera.CameraSubject = hum1
			end
		end)
		if hum0 then
			hum0.Changed:Connect(function(prop)
				if (prop == "Jump") and hum1 and hum1.Parent then
					hum1.Jump = hum0.Jump
				end
			end)
		else
			lp.Character = nil
			lp.Character = c
		end
	end

	local rb = Instance.new("BindableEvent", c)
	rb.Event:Connect(function()
		rb:Destroy()
		sg:SetCore("ResetButtonCallback", true)
		if destroyhum then
			c:BreakJoints()
			return
		end
		if antirespawn then
			if hum0 and hum0.Parent and (hum0.Health > 0) then
				model:BreakJoints()
				hum0.Health = 0
			end
			respawnrequest()
		else
			if hum0 and hum0.Parent and (hum0.Health > 0) then
				model:BreakJoints()
				hum0.Health = 0
			end
		end
	end)
	sg:SetCore("ResetButtonCallback", rb)

	spawn(function()
		while c and c.Parent do
			if hum0 and hum0.Parent and hum1 and hum1.Parent then
				hum1.Jump = hum0.Jump
			end
			wait()
		end
		sg:SetCore("ResetButtonCallback", true)
	end)

	R15toR6 = R15toR6 and hum1 and (hum1.RigType == Enum.HumanoidRigType.R15)
	if R15toR6 then
		local cf = nil
		pcall(function()
			cf = gp(c, "HumanoidRootPart", "BasePart").CFrame
		end)
		if cf then
			local R6parts = { 
				head = {
					Name = "Head",
					Size = Vector3.new(2, 1, 1),
					R15 = {
						Head = 0
					}
				},
				torso = {
					Name = "Torso",
					Size = Vector3.new(2, 2, 1),
					R15 = {
						UpperTorso = 0.2,
						LowerTorso = -0.8
					}
				},
				root = {
					Name = "HumanoidRootPart",
					Size = Vector3.new(2, 2, 1),
					R15 = {
						HumanoidRootPart = 0
					}
				},
				leftArm = {
					Name = "Left Arm",
					Size = Vector3.new(1, 2, 1),
					R15 = {
						LeftHand = -0.85,
						LeftLowerArm = -0.2,
						LeftUpperArm = 0.4
					}
				},
				rightArm = {
					Name = "Right Arm",
					Size = Vector3.new(1, 2, 1),
					R15 = {
						RightHand = -0.85,
						RightLowerArm = -0.2,
						RightUpperArm = 0.4
					}
				},
				leftLeg = {
					Name = "Left Leg",
					Size = Vector3.new(1, 2, 1),
					R15 = {
						LeftFoot = -0.85,
						LeftLowerLeg = -0.15,
						LeftUpperLeg = 0.6
					}
				},
				rightLeg = {
					Name = "Right Leg",
					Size = Vector3.new(1, 2, 1),
					R15 = {
						RightFoot = -0.85,
						RightLowerLeg = -0.15,
						RightUpperLeg = 0.6
					}
				}
			}
			for i, v in pairs(c:GetChildren()) do
				if v:IsA("BasePart") then
					for i1, v1 in pairs(v:GetChildren()) do
						if v1:IsA("Motor6D") then
							v1.Part0 = nil
						end
					end
				end
			end
			for i, v in pairs(R6parts) do
				local part = Instance.new("Part")
				part.Name = v.Name
				part.Size = v.Size
				part.CFrame = cf
				part.Anchored = false
				part.Transparency = 1
				part.CanCollide = false
				for i1, v1 in pairs(v.R15) do
					local R15part = gp(c, i1, "BasePart")
					local att = gp(R15part, "att1_" .. i1, "Attachment")
					if R15part then
						local weld = Instance.new("Weld", R15part)
						weld.Part0 = part
						weld.Part1 = R15part
						weld.C0 = CFrame.new(0, v1, 0)
						weld.C1 = CFrame.new(0, 0, 0)
						R15part.Massless = true
						R15part.Name = "R15_" .. i1
						if att then
							att.Parent = part
							att.Position = Vector3.new(0, v1, 0)
							R15part.Parent = att
						else
							R15part.Parent = part
						end
					end
				end
				part.Parent = c
				R6parts[i] = part
			end
			local R6joints = {
				neck = {
					Parent = R6parts.torso,
					Name = "Neck",
					Part0 = R6parts.torso,
					Part1 = R6parts.head,
					C0 = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
					C1 = CFrame.new(0, -0.5, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
				},
				rootJoint = {
					Parent = R6parts.root,
					Name = "RootJoint" ,
					Part0 = R6parts.root,
					Part1 = R6parts.torso,
					C0 = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
					C1 = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
				},
				rightShoulder = {
					Parent = R6parts.torso,
					Name = "Right Shoulder",
					Part0 = R6parts.torso,
					Part1 = R6parts.rightArm,
					C0 = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
					C1 = CFrame.new(-0.5, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0)
				},
				leftShoulder = {
					Parent = R6parts.torso,
					Name = "Left Shoulder",
					Part0 = R6parts.torso,
					Part1 = R6parts.leftArm,
					C0 = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
					C1 = CFrame.new(0.5, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
				},
				rightHip = {
					Parent = R6parts.torso,
					Name = "Right Hip",
					Part0 = R6parts.torso,
					Part1 = R6parts.rightLeg,
					C0 = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
					C1 = CFrame.new(0.5, 1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0)
				},
				leftHip = {
					Parent = R6parts.torso,
					Name = "Left Hip" ,
					Part0 = R6parts.torso,
					Part1 = R6parts.leftLeg,
					C0 = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
					C1 = CFrame.new(-0.5, 1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
				}
			}
			for i, v in pairs(R6joints) do
				local joint = Instance.new("Motor6D")
				for prop, val in pairs(v) do
					joint[prop] = val
				end
				R6joints[i] = joint
			end
			hum1.RigType = Enum.HumanoidRigType.R6
			hum1.HipHeight = 0
		end
	end
	wait(7)
	for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
		if v:IsA("Accessory") then
			if v.Handle:FindFirstChildOfClass("Mesh") or v.Handle:FindFirstChildOfClass("SpecialMesh") then
				if v.Handle:FindFirstChildOfClass("SpecialMesh") then
					v.Handle:FindFirstChildOfClass("SpecialMesh"):Remove()
				end
			end
		end
	end

	for i,v in next, game:GetService("Players").LocalPlayer.Character:GetDescendants() do
		if v:IsA("BasePart") and v.Name ~="HumanoidRootPart" then
			game:GetService("RunService").Heartbeat:connect(function()
				v.Velocity = Vector3.new(0,35,0)
				wait(0.5)
			end)
		end
	end

	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Electroware Notification";
		Text = "Reanimation Executed!";
		Icon = "http://www.roblox.com/asset/?id=8724185099"})


	game:GetService("RunService").Stepped:Connect(function()
		Humanoid.Died:Connect(function()
			return
		end)
		for i,v in pairs(Character:GetChildren()) do
			if v:IsA("BasePart") then
				v.CanCollide = false
			end
		end
	end)

	_G.Velocity = Vector3.new(10,0,0)

	game:GetService("RunService").Heartbeat:Connect(function()
		for i,v in pairs(Character:GetChildren()) do
			if v:IsA("BasePart") then v.Velocity = _G.Velocity elseif v:IsA("Accessory") then v.Handle.Velocity = _G.Velocity end
		end
	end)
